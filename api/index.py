import asyncio
import logging
import os
import json
from http.server import BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold

# --- –í–ê–®–ò –ù–ê–°–¢–†–û–ô–ö–ò (–í–°–ï –í –û–î–ù–û–ú –ú–ï–°–¢–ï) ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEB_APP_URL = "https://udobnamebel.github.io/Catalog"
ABOUT_US_URL = "https://telegra.ph/O-nas-Mebel-Udobna-02-24"
CONTACTS_URL = "https://taplink.cc/udobnamebel"

# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Vercel
VERCEL_URL = os.environ.get("VERCEL_URL")
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ VERCEL_URL –Ω–µ –ø—É—Å—Ç–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
if VERCEL_URL:
    WEBHOOK_PATH = f"/api/" # Vercel –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ index.py –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ
    WEBHOOK_URL = f"https://{VERCEL_URL}{WEBHOOK_PATH}"
else:
    WEBHOOK_URL = "" # –ü—É—Å—Ç–æ, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
# ----------------------------------------------------

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    keyboard = [
        [types.KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìñ", web_app=WebAppInfo(url=WEB_APP_URL))],
        [types.KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è", url=ABOUT_US_URL), types.KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû", url=CONTACTS_URL)],
    ]
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, {hbold(message.from_user.full_name)}!", reply_markup=reply_markup)

# "–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞" –¥–ª—è Vercel
class handler(BaseHTTPRequestHandler):
    async def do_POST(self):
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            current_webhook = await bot.get_webhook_info()
            if current_webhook.url != WEBHOOK_URL and VERCEL_URL:
                await bot.set_webhook(url=WEBHOOK_URL)

            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª Telegram
            content_len = int(self.headers.get('Content-Length', 0))
            post_body = self.rfile.read(content_len)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
            update = types.Update.model_validate(json.loads(post_body), context={"bot": bot})
            await dp.feed_update(bot=bot, update=update)

            # –û—Ç–≤–µ—á–∞–µ–º Telegram, —á—Ç–æ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            self.send_response(200)
            self.end_headers()
        except Exception as e:
            logging.error(f"Error handling webhook: {e}")
            self.send_response(500)
            self.end_headers()
    
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ Vercel –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –Ω–∞—à–µ–º—É URL –Ω–∞–ø—Ä—è–º—É—é
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'Bot is running and webhook is set up if deployed on Vercel.')

# Vercel –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async def main(request, response):
    server = handler(request, response, server=None)
    await server.do_POST()