import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold

# --- –í–ê–®–ò –ù–ê–°–¢–†–û–ô–ö–ò (–≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ) ---
# –¢–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –±—É–¥–µ–º –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
TOKEN = os.environ.get("7598230437:AAERUTJ48urvWviIRLxlXhIqjGevNRRlFio", "7598230437:AAERUTJ48urvWviIRLxlXhIqjGevNRRlFio")
WEB_APP_URL = "https://udobnamebel.github.io/Catalog"
ABOUT_US_URL = "https://telegra.ph/O-nas-Mebel-Udobna-02-24"
CONTACTS_URL = "https://taplink.cc/udobnamebel"

# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Vercel
VERCEL_URL = os.environ.get("VERCEL_URL")
WEBHOOK_PATH = f"/api/webhook"
WEBHOOK_URL = f"https://{VERCEL_URL}{WEBHOOK_PATH}"
# ----------------------------------------------------

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [types.KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìñ", web_app=WebAppInfo(url=WEB_APP_URL))],
        [types.KeyboardButton(text="–û –Ω–∞—Å ‚ÑπÔ∏è", url=ABOUT_US_URL), types.KeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã üìû", url=CONTACTS_URL)],
    ]
    reply_markup = types.ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, {hbold(message.from_user.full_name)}!", reply_markup=reply_markup)

# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ
@dp.startup()
async def on_startup(bot: Bot) -> None:
    if VERCEL_URL: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Vercel
        await bot.set_webhook(WEBHOOK_URL)

@dp.shutdown()
async def on_shutdown(bot: Bot) -> None:
    if VERCEL_URL: # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        await bot.delete_webhook()

# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç "–∫–æ—Ä–Ω–µ–º" –Ω–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Vercel
# –û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏—Ö –±–æ—Ç—É
async def handle_webhook(req):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        update = types.Update.model_validate_json(await req.text(), context={"bot": bot})
        # –ü–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await dp.feed_update(bot=bot, update=update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"Error handling webhook: {e}")
        return {"status": "error"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ)
async def main() -> None:
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º long polling
    asyncio.run(main())